#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 18, 2019 10:21:23 PM CET  platform: Windows NT

import sys

import mysql
from PyQt5.QtWidgets import QTreeWidget, QTreeWidgetItem, QApplication, QWidget, QVBoxLayout

from Connexion import data, entreprise, requete, no_ent, nom_poste, ordre_hier, id_pers, d6, d1, row, d2, mydb, d3, c2

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Interface_graph_support

class Arbre:
    def __init__(self, nb_de_branches):
        self.carac1 = 1
        self.carac2 = 1
        self.branche = [Branche() for i in range(nb_de_branches)]  # La 5è branche sera branche[4] !


class Branche:
    def __init__(self):
        self.carac11 = 11
        self.carac22 = 22



def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Interface_graph_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Interface_graph_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def ent1(self):

        # Affichage des informations des employés
        for row in d2:
            cursor = mydb.cursor(prepared=True)
            requete = """SELECT * FROM personne where id_pers =%s"""
            parametres = (row[0],)
            cursor.execute(requete, parametres)
            data = cursor.fetchall()


            for row in data:
                # Récupération du nom de poste des employés
                c3 = mydb.cursor(prepared=True)
                nom_poste = """SELECT nom_poste FROM personne where id_pers =%s"""
                p2 = (row[0],)
                c3.execute(nom_poste, p2)
                d3 = c3.fetchone()
                # Récupération de l'odre hierarchique des employés
                c6 = mydb.cursor(prepared=True)
                ordre_hier = """SELECT ordre_hierarchique FROM type_poste where nom_type_poste =%s """
                p4 = (d3[0].decode("utf-8"),)
                c6.execute(ordre_hier, p4)
                d6 = c6.fetchone()

        app = QApplication(sys.argv)
        window = QWidget()
        layout = QVBoxLayout(window)

        window.setWindowTitle("Arbre hiérarchique")

        window.resize(1000, 1000)

        trWidget = QTreeWidget()
        trWidget.setHeaderLabels(['Numero', 'Id des employés', 'Informations personnelles', '', ])
        #breakpoint()
        nbpersonne = 0
        i = 1
        for id_pers in d2:

                cursor2 = mydb.cursor(prepared=True)
                requete2 = """SELECT * FROM personne where id_pers =%s"""
                parametres2 = (id_pers[0],)
                cursor2.execute(requete2, parametres2)
                data2 = cursor2.fetchone()

                cg = QTreeWidgetItem(trWidget, [str(d1[0])])
                c1 = QTreeWidgetItem(cg, ["", str(data2[0]), str(data2[1].decode("utf-8")), str(data2[2].decode("utf-8"))])
                c2 = QTreeWidgetItem(c1, ["","", str(data2[3].decode("utf-8"))])
                c3 = QTreeWidgetItem(c2, ["","", str(data2[4].decode("utf-8"))])
                c4 = QTreeWidgetItem(c3, ["", "", str(data2[5].decode("utf-8"))])
                c5 = QTreeWidgetItem(c4, ["", "", str(data2[6].decode("utf-8"))])
                layout.addWidget(trWidget)



        window.show()

        sys.exit(app.exec_())
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("749x649+574+146")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("App")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.013, rely=0.015, relheight=0.84, relwidth=0.955)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.392, rely=0.037, height=26, width=142)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text=entreprise)

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.448, rely=0.092, height=33, width=66)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(borderwidth="0")
        self.Button1.configure(command=Interface_graph_support.ent1)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''')
        self.Button1.configure(command=self.ent1)




if __name__ == '__main__':

    vp_start_gui()
    sys.exit()












